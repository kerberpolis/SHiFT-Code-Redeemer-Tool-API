<<<<<<< HEAD
name: FastAPI AWS CI/CD develop 
=======
name: FastAPI AWS CI/CD production 
>>>>>>> add deployment for dev api

on:
  push:
    branches-ignore: 
      - master 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:   
      - uses: actions/checkout@v2
      
      # Step-1 Setup Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          # optional: architecture: x64 x64 or x86. Defaults to x64 if not specified

      # Step-2 Install Python Virtual ENV
      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

      # Step-3 Setup Virtual ENV
      # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows
      - name:  Virtual ENV
        uses: actions/cache@v2
        id: cache-venv # name for referring later
        with:
          path: venv # what we cache: the Virtual ENV
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements_docker.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      # Step-4 Build a Virtual ENV, but only if it doesn't already exist
      - name: Activate Virtual ENV
        run: python -m venv venv && source venv/bin/activate && pip3 install -r requirements_docker.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Run Tests
        env:
          BORDERLANDS_ENCRYPTION_KEY: ${{ secrets.BORDERLANDS_ENCRYPTION_KEY }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
        # Note that you have to activate the virtualenv in every step
        # because GitHub actions doesn't preserve the environment   
        run: |
          . venv/bin/activate
          pytest -vvs tests

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: build and push docker image
        env:
          REPO: borderlands-fastapi
        run:  |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_BORDERLANDS_ECR }}
          docker build -t ${REPO}:dev .
          docker tag ${REPO}:dev ${{ secrets.AWS_BORDERLANDS_ECR }}:dev
          docker push ${{ secrets.AWS_BORDERLANDS_ECR }}:dev

      - name: copy docker-compose file
        run: scp -i ${{ secrets.EC2_PRIVATE_KEY }} docker-compose.yml ec2-user@${{ secrets.EC2_HOST }}

      - name: pull and run on ec2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_BORDERLANDS_ECR }}
            docker pull ${{ secrets.AWS_BORDERLANDS_ECR }}:dev
            docker stop borderlands-fastapi-dev
            docker rm borderlands-fastapi-dev
            docker-compose -f docker-compose.dev.yml up -d
